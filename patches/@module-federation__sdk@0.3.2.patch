diff --git a/dist/index.cjs.js b/dist/index.cjs.js
index 5ac66502f7e3230335fbab7bcf67ecb9614f938f..17765fcfc96877f2d9a68569a52af94cf8e75ccc 100644
--- a/dist/index.cjs.js
+++ b/dist/index.cjs.js
@@ -51,6 +51,16 @@ var SharePlugin = /*#__PURE__*/Object.freeze({
 function isBrowserEnv() {
     return typeof window !== 'undefined';
 }
+function isNodeEnv() {
+    return (
+        typeof process !== 'undefined' && process?.versions?.node !== undefined
+    );
+}
+function isReactNativeEnv() {
+    return (
+        typeof navigator !== 'undefined' && navigator?.product === 'ReactNative'
+    );
+}
 function isDebugMode() {
     if (typeof process !== 'undefined' && process.env && process.env['FEDERATION_DEBUG']) {
         return Boolean(process.env['FEDERATION_DEBUG']);
@@ -702,6 +712,55 @@ function normalizeOptions(enableDefault, defaultOptions, key) {
     };
 }
 
+function createScriptReactNative(
+    url,
+    cb,
+    attrs,
+    createScriptHook,
+  ) {
+    if (createScriptHook) {
+      const hookResult = createScriptHook(url, attrs);
+      if (hookResult && typeof hookResult === 'object' && 'url' in hookResult) {
+        url = hookResult.url;
+      }
+    }
+  
+    if (!attrs || !attrs['globalName']) {
+      cb(new Error('createScriptReactNative: globalName is required'));
+      return;
+    }
+  
+    __webpack_require__.l(
+      url,
+      (e) => {
+        cb(e ? new Error(`Script execution failed`) : undefined);
+      },
+      attrs['globalName'],
+    );
+  }
+  
+function loadScriptReactNative(
+    url,
+    info,
+  ) {
+    return new Promise((resolve, reject) => {
+      createScriptReactNative(
+        url,
+        (error) => {
+          if (error) {
+            reject(error);
+          } else {
+            const remoteEntryKey = info?.attrs?.['globalName'];
+            const entryExports = (globalThis)[remoteEntryKey];
+            resolve(entryExports);
+          }
+        },
+        info.attrs,
+        info.createScriptHook,
+      );
+    });
+  }
+
 exports.BROWSER_LOG_KEY = BROWSER_LOG_KEY;
 exports.BROWSER_LOG_VALUE = BROWSER_LOG_VALUE;
 exports.ENCODE_NAME_PREFIX = ENCODE_NAME_PREFIX;
@@ -724,6 +783,7 @@ exports.containerReferencePlugin = ContainerReferencePlugin;
 exports.createLink = createLink;
 exports.createScript = createScript;
 exports.createScriptNode = createScriptNode;
+exports.createScriptReactNative = createScriptReactNative;
 exports.decodeName = decodeName;
 exports.encodeName = encodeName;
 exports.error = error;
@@ -734,11 +794,14 @@ exports.getProcessEnv = getProcessEnv;
 exports.getResourceUrl = getResourceUrl;
 exports.inferAutoPublicPath = inferAutoPublicPath;
 exports.isBrowserEnv = isBrowserEnv;
+exports.isNodeEnv = isNodeEnv;
+exports.isReactNativeEnv = isReactNativeEnv;
 exports.isDebugMode = isDebugMode;
 exports.isManifestProvider = isManifestProvider;
 exports.isStaticResourcesEqual = isStaticResourcesEqual;
 exports.loadScript = loadScript;
 exports.loadScriptNode = loadScriptNode;
+exports.loadScriptReactNative = loadScriptReactNative;
 exports.logger = logger;
 exports.moduleFederationPlugin = ModuleFederationPlugin;
 exports.normalizeOptions = normalizeOptions;
