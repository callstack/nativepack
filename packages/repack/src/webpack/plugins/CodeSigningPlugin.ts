import crypto from 'crypto';
import jwt from 'jsonwebtoken';
import fs from 'fs-extra';
import webpack from 'webpack';
import type { WebpackPlugin } from '../../types';

/**
 * {@link CodeSigningPlugin} configuration options.
 */
export interface CodeSigningPluginConfig {
  /** Output file name. */
  outputFile: string;
  /** Path to the private key. */
  privateKeyPath: string;
}

export class CodeSigningPlugin implements WebpackPlugin {
  /**
   * Constructs new `RepackPlugin`.
   *
   * @param config Plugin configuration options.
   */
  constructor(private config: CodeSigningPluginConfig) {
    this.config.outputFile =
      this.config.outputFile ?? 'code_signing_mapping.json';
    this.config.privateKeyPath = this.config.privateKeyPath ?? './private.pem';
  }

  /**
   * Apply the plugin.
   *
   * @param compiler Webpack compiler instance.
   */
  apply(compiler: webpack.Compiler) {
    const pluginName = CodeSigningPlugin.name;

    const { webpack } = compiler;

    const { Compilation } = webpack;

    const { RawSource } = webpack.sources;

    // Tapping to the "thisCompilation" hook in order to further tap
    // to the compilation process on an earlier stage.
    compiler.hooks.thisCompilation.tap(pluginName, (compilation) => {
      // Tapping to the assets processing pipeline on a specific stage.
      compilation.hooks.processAssets.tap(
        {
          name: pluginName,

          // Using one of the later asset processing stages to ensure
          // that all assets were already added to the compilation by other plugins.
          stage: Compilation.PROCESS_ASSETS_STAGE_SUMMARIZE,
        },
        (assets) => {
          // "assets" is an object that contains all assets
          // in the compilation, the keys of the object are pathnames of the assets
          // and the values are file sources.

          const content = Object.entries(assets)
            .filter(([fileName]) => fileName.endsWith('.bundle'))
            .reduce((acc, [fileName, file]) => {
              // get bundle
              const bundle = file.source();

              // generate bundle hash
              const hash = crypto
                .createHash('sha256')
                .update(bundle)
                .digest('hex');

              // get private key
              const privateKey = fs.readFileSync(this.config.privateKeyPath);

              // generate token
              const token = jwt.sign({ hash }, privateKey, {
                algorithm: 'RS256',
              });

              acc[fileName] = token;

              return acc;
            }, {} as Record<string, string>);

          const json = JSON.stringify(content);
          // Adding new asset to the compilation, so it would be automatically
          // generated by the webpack in the output directory.
          compilation.emitAsset(this.config.outputFile, new RawSource(json));
        }
      );
    });
  }
}
